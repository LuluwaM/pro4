# -*- coding: utf-8 -*-
"""Lambda.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11IskDcrUSFNxNXpRW9zuQS4bSmMNvVex
"""

#serializeImageData
import json
import boto3
import base64

s3 = boto3.client('s3')

def lambda_handler(event, context):
    key = event['s3_key']
    bucket = event['s3_bucket']

    s3.download_file(bucket, key, "/tmp/image.png")

    with open("/tmp/image.png", "rb") as f:
        image_data = base64.b64encode(f.read()).decode('utf-8')


    return {
        'statusCode': 200,
        'body': {
            "image_data": image_data,
            "s3_bucket": bucket,
            "s3_key": key,
            "inferences": []
        }
    }

## classifyImage
import boto3
import base64
import json

runtime = boto3.client('sagemaker-runtime')

ENDPOINT = "image-classification-2025-08-18-18-37-44-936"

def lambda_handler(event, context):
    if "image_data" not in event:
        raise ValueError("Missing 'image_data' in input event")

    image_data = event['image_data']

    image_data += "=" * (-len(image_data) % 4)

    image_bytes = base64.b64decode(image_data)

    response = runtime.invoke_endpoint(
        EndpointName=ENDPOINT,
        ContentType='application/x-image',
        Body=image_bytes
    )

    result = response['Body'].read().decode('utf-8')

    try:
        inferences_list = json.loads(result)
    except json.JSONDecodeError:
        inferences_list = result

    event['inferences'] = inferences_list

    print("Inferences:", event['inferences'])

    return event

## filterLowConfidence
import json

THRESHOLD = 0.7

def lambda_handler(event, context):
    inferences = event.get("inferences", [])

    filtered = [i for i in inferences if i >= THRESHOLD]

    event["inferences"] = filtered

    print("Filtered inferences:", filtered)

    return {
        'statusCode': 200,
        'body': event
    }